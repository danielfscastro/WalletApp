services:
  kafka: # Kafka service configuration
    image: docker.io/bitnami/kafka:3.7  # Specifies the Kafka Docker image to use
    ports:
      - "9092:9092"  # Maps port 9092 on the host to port 9092 on the container
    volumes:
      - "kafka_data:/bitnami"  # Mounts a volume for Kafka data persistence
    environment: # Environment variables for Kafka configuration
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0  # Node ID for the Kafka broker
      - KAFKA_CFG_PROCESS_ROLES=controller,broker  # Process roles for KRaft mode
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093  # Quorum voters for the controller
      # Listeners configuration
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_SPRING_ALONE://:9094  # Configures listeners
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_SPRING_ALONE://:9094  # Advertised listeners for clients
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_SPRING_ALONE:PLAINTEXT  # Security protocols
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER  # Names of the controller listeners
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT  # Listener name for inter-broker communication
    extends:
      file: common-config.yml  # Loads additional configuration from common-config.yml
      service: network-deploy-service  # Extends the network-deploy-service

  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ../grafana/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3100/loki/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - wallet-app

  promtail:
    image: grafana/promtail:2.9.2
    command: -config.file=/etc/promtail/config.yaml
    volumes:
      - ../grafana/promtail/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9080/promtail/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - wallet-app

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - wallet-app

  configserver:  # Configuration server service
    image: "danielfscastro/configserver:s1"  # Docker image for the Config Server
    container_name: configserver-ms  # Name for the container
    ports:
      - "8080:8080"  # Maps port 8080 on the host to port 8080 on the container
    healthcheck:  # Health check configuration for the service
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"  # Command to check readiness
      interval: 20s  # Interval between health checks
      timeout: 5s  # Timeout for each health check
      retries: 2  # Number of retries before considering the service unhealthy
      start_period: 10s  # Delay before starting health checks
    extends:
      file: common-config.yml  # Loads additional configuration from common-config.yml
      service: microservice-base-config  # Extends the microservice-base-config settings

  eurekaserver:
    image: "danielfscastro/eurekaserver:s1"
    container_name: eurekaserver-ms
    ports:
      - "8079:8079"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8079/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"

  customer:  # Customer microservice configuration
    image: "danielfscastro/customer:s1"  # Docker image for the Wallet service
    container_name: customer-ms  # Named container for easier management
    ports:
      - "8081:8081"  # Maps port 8081 on the host to port 8081 in the container
    healthcheck:  # Health check configuration to monitor the service's readiness
      test: "curl --fail --silent localhost:8081/actuator/health/readiness  | grep UP || exit 1"  # Command to check if the service is healthy
      interval: 20s  # How often to perform the health check
      timeout: 5s  # Maximum time to wait for a health check response
      retries: 2  # Number of retries before considering the service unhealthy
      start_period: 10s  # Initial delay before starting health checks
    depends_on:  # Dependencies on other services
      eurekaserver:
        condition: service_healthy
      customerdb:
        condition: service_healthy
    environment:  # Environment variables for configuring the service
      SPRING_APPLICATION_NAME: "customer"  # Name of the Spring application
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9094"  # Kafka broker URL for message binding
      SPRING_DATASOURCE_URL: "jdbc:mysql://customerdb:3306/customerdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  wallet:  # Wallet microservice configuration
    image: "danielfscastro/wallet:s1"  # Docker image for the Wallet service
    container_name: wallet-ms  # Named container for easier management
    ports:
      - "8082:8082"  # Maps port 8081 on the host to port 8081 in the container
    healthcheck:  # Health check configuration to monitor the service's readiness
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"  # Command to check if the service is healthy
      interval: 20s  # How often to perform the health check
      timeout: 5s  # Maximum time to wait for a health check response
      retries: 2  # Number of retries before considering the service unhealthy
      start_period: 10s  # Initial delay before starting health checks
    depends_on:  # Dependencies on other services
      eurekaserver:
        condition: service_healthy
      walletdb:
        condition: service_healthy
    environment:  # Environment variables for configuring the service
      SPRING_APPLICATION_NAME: "wallet"  # Name of the Spring application
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9094"  # Kafka broker URL for message binding
      SPRING_DATASOURCE_URL: "jdbc:mysql://walletdb:3306/walletdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  apigateway:
    image: "danielfscastro/apigateway:s1"
    container_name: apigateway-ms
    ports:
      - "8000:8000"
    depends_on:
      customer:
        condition: service_healthy
      wallet:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "apigateway"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  customerdb:
    container_name: customerdb
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: customerdb
    extends:
      file: common-config.yml
      service: microservice-db-config
    volumes:
      - "customer_db_data:/var/lib/mysql"

  walletdb:
    container_name: walletdb
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: walletdb
    extends:
      file: common-config.yml
      service: microservice-db-config
    volumes:
      - "wallet_db_data:/var/lib/mysql"

volumes:
  kafka_data:  # Definition of the Kafka data volume
    driver: local  # Specifies using the local driver for volume storage
  customer_db_data:
  wallet_db_data:

networks:
  wallet-app:  # Definition of the wallet-app network
    driver: "bridge"  # Uses the bridge network driver