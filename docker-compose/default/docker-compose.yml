services:
  kafka: # Kafka service configuration
    image: docker.io/bitnami/kafka:3.7  # Specifies the Kafka Docker image to use
    ports:
      - "9092:9092"  # Maps port 9092 on the host to port 9092 on the container
    volumes:
      - "kafka_data:/bitnami"  # Mounts a volume for Kafka data persistence
    environment: # Environment variables for Kafka configuration
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0  # Node ID for the Kafka broker
      - KAFKA_CFG_PROCESS_ROLES=controller,broker  # Process roles for KRaft mode
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093  # Quorum voters for the controller
      # Listeners configuration
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_SPRING_ALONE://:9094  # Configures listeners
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_SPRING_ALONE://:9094  # Advertised listeners for clients
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_SPRING_ALONE:PLAINTEXT  # Security protocols
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER  # Names of the controller listeners
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT  # Listener name for inter-broker communication
    extends:
      file: common-config.yml  # Loads additional configuration from common-config.yml
      service: network-deploy-service  # Extends the network-deploy-service

  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../grafana/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      wallet-app:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../grafana/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.0.0
    volumes:
      - ../grafana/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio:RELEASE.2024-05-27T19-17-46Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../grafana/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:2.4.2
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../grafana/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:11.0.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../grafana/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:3.0.0
    volumes:
      - ../grafana/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:1.25.5
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:  # Configuration server service
    image: "danielfscastro/configserver:s1"  # Docker image for the Config Server
    container_name: configserver-ms  # Name for the container
    ports:
      - "8080:8080"  # Maps port 8080 on the host to port 8080 on the container
    healthcheck:  # Health check configuration for the service
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"  # Command to check readiness
      interval: 10s  # How often to perform the health check
      timeout: 2s  # Maximum time to wait for a health check response
      retries: 5 # Number of retries before considering the service unhealthy
      start_period: 15s  # Initial delay before starting health checks
    extends:
      file: common-config.yml  # Loads additional configuration from common-config.yml
      service: microservice-base-config  # Extends the microservice-base-config settings
    environment:
      OTEL_SERVICE_NAME: "configserver"
      SPRING_APPLICATION_NAME: "configserver"

  eurekaserver:
    image: "danielfscastro/eurekaserver:s1"
    container_name: eurekaserver-ms
    ports:
      - "8079:8079"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8079/actuator/health/readiness | grep UP || exit 1"
      interval: 10s  # How often to perform the health check
      timeout: 2s  # Maximum time to wait for a health check response
      retries: 5 # Number of retries before considering the service unhealthy
      start_period: 40s  # Initial delay before starting health checks
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"

  customer:  # Customer microservice configuration
    image: "danielfscastro/customer:s1"  # Docker image for the Wallet service
    container_name: customer-ms  # Named container for easier management
    ports:
      - "8081:8081"  # Maps port 8081 on the host to port 8081 in the container
    healthcheck:  # Health check configuration to monitor the service's readiness
      test: "curl --fail --silent localhost:8081/actuator/health/readiness  | grep UP || exit 1"  # Command to check if the service is healthy
      interval: 10s  # How often to perform the health check
      timeout: 2s  # Maximum time to wait for a health check response
      retries: 5 # Number of retries before considering the service unhealthy
      start_period: 45s  # Initial delay before starting health checks
    depends_on:  # Dependencies on other services
      eurekaserver:
        condition: service_healthy
      customerdb:
        condition: service_healthy
    environment:  # Environment variables for configuring the service
      SPRING_APPLICATION_NAME: "customer"  # Name of the Spring application
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9094"  # Kafka broker URL for message binding
      SPRING_DATASOURCE_URL: "jdbc:mysql://customerdb:3306/customerdb"
      OTEL_SERVICE_NAME: "customer"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  wallet:  # Wallet microservice configuration
    image: "danielfscastro/wallet:s1"  # Docker image for the Wallet service
    container_name: wallet-ms  # Named container for easier management
    ports:
      - "8082:8082"  # Maps port 8081 on the host to port 8081 in the container
    healthcheck:  # Health check configuration to monitor the service's readiness
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"  # Command to check if the service is healthy
      interval: 10s  # How often to perform the health check
      timeout: 2s  # Maximum time to wait for a health check response
      retries: 5 # Number of retries before considering the service unhealthy
      start_period: 45s  # Initial delay before starting health checks
    depends_on:  # Dependencies on other services
      eurekaserver:
        condition: service_healthy
      walletdb:
        condition: service_healthy
    environment:  # Environment variables for configuring the service
      SPRING_APPLICATION_NAME: "wallet"  # Name of the Spring application
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9094"  # Kafka broker URL for message binding
      SPRING_DATASOURCE_URL: "jdbc:mysql://walletdb:3306/walletdb"
      OTEL_SERVICE_NAME: "wallet"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  apigateway:
    image: "danielfscastro/apigateway:s1"
    container_name: apigateway-ms
    ports:
      - "8000:8000"
    depends_on:
      customer:
        condition: service_healthy
      wallet:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "apigateway"
      OTEL_SERVICE_NAME: "apigateway"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  customerdb:
    container_name: customerdb
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: customerdb
    extends:
      file: common-config.yml
      service: microservice-db-config
    volumes:
      - "customer_db_data:/var/lib/mysql"

  walletdb:
    container_name: walletdb
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: walletdb
    extends:
      file: common-config.yml
      service: microservice-db-config
    volumes:
      - "wallet_db_data:/var/lib/mysql"

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - "keycloak_data:/opt/keycloak/data"
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-service

volumes:
  kafka_data:  # Definition of the Kafka data volume
    driver: local  # Specifies using the local driver for volume storage
  customer_db_data:
  wallet_db_data:
  keycloak_data:

networks:
  wallet-app:  # Definition of the wallet-app network
    driver: "bridge"  # Uses the bridge network driver