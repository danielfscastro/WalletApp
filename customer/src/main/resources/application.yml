server:
  port: 8081  # Port on which the server will listen for requests
  forward-headers-strategy: framework  # Strategy for handling forwarded headers

spring:
  application:
    name: "customer"  # Name of the Spring application
  profiles:
    active: "dev"  # Active profile for the application (development profile)

  datasource:
    url: jdbc:h2:mem:testdb  # JDBC URL for connecting to an H2 in-memory database
    driverClassName: org.h2.Driver  # Driver class for H2
    username: sa  # Username for the H2 database
    password: ''  # Password for the H2 database (H2 uses an empty password)

  h2:
    console:
      enabled: true  # Enable H2 database console for web access

  jpa:
    hibernate:
      ddl-auto: update  # Automatically update the database schema on startup
    show-sql: true  # Show SQL statements in the console/logs

  config:
    import: optional:configserver:http://localhost:8080  # Import configuration from a config server
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true  # Enable circuit breaker for OpenFeign clients
    stream:
      bindings:
        updatingCommunication-in-0:
          destination: create-wallet-response
          group: ${spring.application.name}
        sendCommunication-out-0:
          destination: create-wallet-request
          # This binding sends messages to the 'send-communication' topic.
      kafka:
        binder:
          brokers:
            - localhost:9092
            # Specifies the address of the Kafka broker, in this case, running locally on port 9092.

management:
  endpoints:
    web:
      exposure:
        include: "*"  # Expose all management endpoints over the web
  info:
    env:
      enabled: true  # Enable environment information in the info endpoint
  health:
    readiness-state:
      enabled: true  # Enable readiness checks
    liveness-state:
      enabled: true  # Enable liveness checks
    endpoint:
      shutdown:
        enabled: true  # Enable the shutdown endpoint
      health:
        probes:
          enabled: true  # Enable health probes for detailed checks

endpoints:
  shutdown:
    enabled: true  # Enable the shutdown endpoint

logging:
  level:
    com:
      demo:
        wallet: ERROR  # Set log level for the application package
    org:
      springframework: ERROR  # Set log level for Spring framework
    io:
      springdoc: ERROR  # Set log level for SpringDoc
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"  # Custom log pattern

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10  # Number of calls tracked for circuit breaker state
      permittedNumberOfCallsInHalfOpenState: 2  # Calls allowed in half-open state
      failureRateThreshold: 50  # Failure rate percentage to open the circuit
      waitDurationInOpenState: 10000  # Duration circuit remains open

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3  # Maximum retry attempts
      waitDuration: 500  # Duration to wait before the next retry
      enableExponentialBackoff: true  # Enable exponential backoff
      exponentialBackoffMultiplier: 2  # Multiplier for exponential backoff
      ignoreExceptions:
        - java.lang.NullPointerException  # Exceptions to ignore during retry
      retryExceptions:
        - java.util.concurrent.TimeoutException  # Exceptions that trigger a retry

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000  # Maximum wait time for acquiring a permit
      limitRefreshPeriod: 5000  # Duration for refreshing permits
      limitForPeriod: 1  # Maximum requests within the refresh period

eureka:
  instance:
    preferIpAddress: true  # Prefer IP address for registration
  client:
    fetchRegistry: true  # Fetch registration from the Eureka server
    registerWithEureka: true  # Register the service with Eureka
    serviceUrl:
      defaultZone: http://localhost:8079/eureka/  # Eureka server URL

info:
  app:
    name: "customer"  # Application name for the info endpoint
    description: "Customer Application"  # Description of the application